# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'main2.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QColorDialog, QMessageBox
import cv2
import imutils
import numpy as np
# importing tools
import options
# import mysquery


class Ui_maineditor(object):
    def setupUi(self, maineditor):
        maineditor.setObjectName("maineditor")
        maineditor.setWindowModality(QtCore.Qt.NonModal)
        maineditor.setEnabled(True)
        maineditor.resize(1920, 1080)
        maineditor.setMinimumSize(QtCore.QSize(0, 0))
        maineditor.setMaximumSize(QtCore.QSize(1920, 1080))
        maineditor.showMaximized()
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap(
            "C:/Users/Harsh/Desktop/sem 6 project/application/logo.svg"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        maineditor.setWindowIcon(icon)
        maineditor.setWindowOpacity(1.0)
        maineditor.setAutoFillBackground(False)
        maineditor.setStyleSheet("background-color:#6f6f6f;\n"
                                 "color:white;")
        maineditor.setAnimated(True)
        self.centralwidget = QtWidgets.QWidget(maineditor)
        self.centralwidget.setObjectName("centralwidget")
        self.Tools = QtWidgets.QGroupBox(self.centralwidget)
        self.Tools.setGeometry(QtCore.QRect(10, 10, 291, 991))
        font = QtGui.QFont()
        font.setFamily("MV Boli")
        font.setPointSize(20)
        self.Tools.setFont(font)
        self.Tools.setStyleSheet("background-color:#6f6f6f;\n"
                                 "color:white;\n"
                                 "")
        self.Tools.setObjectName("Tools")
        self.ajustbtn = QtWidgets.QPushButton(self.Tools)
        self.ajustbtn.setGeometry(QtCore.QRect(20, 90, 231, 41))
        font = QtGui.QFont()
        font.setFamily("MV Boli")
        font.setPointSize(12)
        font.setUnderline(True)
        self.ajustbtn.setFont(font)
        self.ajustbtn.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.ajustbtn.setStyleSheet("text-decoration:underline;")
        self.ajustbtn.setObjectName("ajustbtn")
        self.cropbtn = QtWidgets.QPushButton(self.Tools)
        self.cropbtn.setGeometry(QtCore.QRect(20, 150, 231, 41))
        font = QtGui.QFont()
        font.setFamily("MV Boli")
        font.setPointSize(12)
        font.setUnderline(True)
        self.cropbtn.setFont(font)
        self.cropbtn.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.cropbtn.setStyleSheet("text-decoration:underline;")
        self.cropbtn.setObjectName("cropbtn")
        self.filterbtn = QtWidgets.QPushButton(self.Tools)
        self.filterbtn.setGeometry(QtCore.QRect(20, 210, 231, 41))
        font = QtGui.QFont()
        font.setFamily("MV Boli")
        font.setPointSize(12)
        font.setUnderline(True)
        self.filterbtn.setFont(font)
        self.filterbtn.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.filterbtn.setStyleSheet("text-decoration:underline;")
        self.filterbtn.setObjectName("filterbtn")
        self.textbtn = QtWidgets.QPushButton(self.Tools)
        self.textbtn.setGeometry(QtCore.QRect(20, 270, 231, 41))
        font = QtGui.QFont()
        font.setFamily("MV Boli")
        font.setPointSize(12)
        font.setUnderline(True)
        self.textbtn.setFont(font)
        self.textbtn.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.textbtn.setStyleSheet("text-decoration:underline;")
        self.textbtn.setObjectName("textbtn")
        self.savebtn = QtWidgets.QPushButton(self.Tools)
        self.savebtn.setGeometry(QtCore.QRect(10, 730, 121, 41))
        font = QtGui.QFont()
        font.setFamily("MV Boli")
        font.setPointSize(12)
        self.savebtn.setFont(font)
        self.savebtn.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.savebtn.setObjectName("savebtn")
        self.openbtn = QtWidgets.QPushButton(self.Tools)
        self.openbtn.setGeometry(QtCore.QRect(150, 730, 121, 41))
        font = QtGui.QFont()
        font.setFamily("MV Boli")
        font.setPointSize(12)
        self.openbtn.setFont(font)
        self.openbtn.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.openbtn.setObjectName("openbtn")
        self.Revertallbtn = QtWidgets.QPushButton(self.Tools)
        self.Revertallbtn.setGeometry(QtCore.QRect(60, 790, 151, 41))
        font = QtGui.QFont()
        font.setFamily("MV Boli")
        font.setPointSize(12)
        self.Revertallbtn.setFont(font)
        self.Revertallbtn.setCursor(
            QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.Revertallbtn.setObjectName("Revertallbtn")
        self.options = QtWidgets.QGroupBox(self.centralwidget)
        self.options.setGeometry(QtCore.QRect(1550, 10, 341, 981))
        font = QtGui.QFont()
        font.setFamily("MV Boli")
        font.setPointSize(20)
        self.options.setFont(font)
        self.options.setStyleSheet("background-color:#6f6f6f;\n"
                                   "color:white;")
        self.options.setObjectName("options")
        self.savechgbtn = QtWidgets.QPushButton(self.options)
        self.savechgbtn.setGeometry(QtCore.QRect(20, 847, 151, 41))
        font = QtGui.QFont()
        font.setFamily("MV Boli")
        font.setPointSize(12)
        self.savechgbtn.setFont(font)
        self.savechgbtn.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.savechgbtn.setObjectName("savechgbtn")
        self.revertbtn = QtWidgets.QPushButton(self.options)
        self.revertbtn.setGeometry(QtCore.QRect(180, 850, 151, 41))
        font = QtGui.QFont()
        font.setFamily("MV Boli")
        font.setPointSize(12)
        self.revertbtn.setFont(font)
        self.revertbtn.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.revertbtn.setObjectName("revertbtn")
        self.textfrm = QtWidgets.QFrame(self.options)
        self.textfrm.setGeometry(QtCore.QRect(10, 70, 321, 741))
        self.textfrm.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.textfrm.setFrameShadow(QtWidgets.QFrame.Raised)
        self.textfrm.setObjectName("textfrm")
        self.fontl = QtWidgets.QLabel(self.textfrm)
        self.fontl.setGeometry(QtCore.QRect(20, 150, 131, 41))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.fontl.setFont(font)
        self.fontl.setObjectName("fontl")
        self.colorl = QtWidgets.QLabel(self.textfrm)
        self.colorl.setGeometry(QtCore.QRect(20, 250, 131, 41))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.colorl.setFont(font)
        self.colorl.setObjectName("colorl")
        self.chscolorbtn = QtWidgets.QPushButton(self.textfrm)
        self.chscolorbtn.setGeometry(QtCore.QRect(20, 300, 141, 31))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.chscolorbtn.setFont(font)
        self.chscolorbtn.setObjectName("chscolorbtn")
        self.fontselect = QtWidgets.QComboBox(self.textfrm)
        self.fontselect.setGeometry(QtCore.QRect(20, 210, 231, 22))
        font = QtGui.QFont()
        font.setFamily("MV Boli")
        font.setPointSize(10)
        self.fontselect.setFont(font)
        self.fontselect.setObjectName("fontselect")
        self.fontselect.addItem("")
        self.fontselect.addItem("")
        self.fontselect.addItem("")
        self.fontselect.addItem("")
        self.fontselect.addItem("")
        self.fontselect.addItem("")
        self.fontselect.addItem("")
        self.fontselect.addItem("")
        self.inputtxtl = QtWidgets.QLabel(self.textfrm)
        self.inputtxtl.setGeometry(QtCore.QRect(20, 10, 131, 41))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.inputtxtl.setFont(font)
        self.inputtxtl.setObjectName("inputtxtl")
        self.textEdit = QtWidgets.QTextEdit(self.textfrm)
        self.textEdit.setGeometry(QtCore.QRect(20, 70, 291, 51))
        font = QtGui.QFont()
        font.setFamily("MV Boli")
        font.setPointSize(11)
        self.textEdit.setFont(font)
        self.textEdit.setStyleSheet("border:1px solid white")
        self.textEdit.setObjectName("textEdit")
        self.Addtextbtn = QtWidgets.QPushButton(self.textfrm)
        self.Addtextbtn.setGeometry(QtCore.QRect(20, 390, 141, 31))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.Addtextbtn.setFont(font)
        self.Addtextbtn.setObjectName("Addtextbtn")
        self.filterfrm = QtWidgets.QFrame(self.textfrm)
        self.filterfrm.setGeometry(QtCore.QRect(0, -10, 331, 741))
        self.filterfrm.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.filterfrm.setFrameShadow(QtWidgets.QFrame.Raised)
        self.filterfrm.setObjectName("filterfrm")
        self.colorfilters = QtWidgets.QLabel(self.filterfrm)
        self.colorfilters.setGeometry(QtCore.QRect(20, 30, 121, 31))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.colorfilters.setFont(font)
        self.colorfilters.setObjectName("colorfilters")
        self.bandwbtn = QtWidgets.QRadioButton(self.filterfrm)
        self.bandwbtn.setGeometry(QtCore.QRect(20, 80, 151, 20))
        self.bandwbtn.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        font = QtGui.QFont()
        font.setFamily("MV Boli")
        font.setPointSize(10)
        self.bandwbtn.setFont(font)
        self.bandwbtn.setStyleSheet("QRadioButton::indicator {\n"
                                    "    width: 0;\n"
                                    "    height: 0;\n"
                                    "}")
        self.bandwbtn.setObjectName("bandwbtn")
        self.embossbtn = QtWidgets.QRadioButton(self.filterfrm)
        self.embossbtn.setGeometry(QtCore.QRect(20, 130, 151, 20))
        self.embossbtn.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        font = QtGui.QFont()
        font.setFamily("MV Boli")
        font.setPointSize(10)
        self.embossbtn.setFont(font)
        self.embossbtn.setStyleSheet("QRadioButton::indicator {\n"
                                     "    width: 0;\n"
                                     "    height: 0;\n"
                                     "}")
        self.embossbtn.setObjectName("embossbtn")
        self.grayscalebtn = QtWidgets.QRadioButton(self.filterfrm)
        self.grayscalebtn.setGeometry(QtCore.QRect(20, 170, 151, 20))
        self.grayscalebtn.setCursor(
            QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        font = QtGui.QFont()
        font.setFamily("MV Boli")
        font.setPointSize(10)
        self.grayscalebtn.setFont(font)
        self.grayscalebtn.setStyleSheet("QRadioButton::indicator {\n"
                                        "    width: 0;\n"
                                        "    height: 0;\n"
                                        "}")
        self.grayscalebtn.setObjectName("grayscalebtn")
        self.bleanbtn = QtWidgets.QRadioButton(self.filterfrm)
        self.bleanbtn.setGeometry(QtCore.QRect(20, 220, 151, 20))
        self.bleanbtn.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        font = QtGui.QFont()
        font.setFamily("MV Boli")
        font.setPointSize(10)
        self.bleanbtn.setFont(font)
        self.bleanbtn.setStyleSheet("QRadioButton::indicator {\n"
                                    "    width: 0;\n"
                                    "    height: 0;\n"
                                    "}")
        self.bleanbtn.setObjectName("bleanbtn")
        self.leerbtn = QtWidgets.QRadioButton(self.filterfrm)
        self.leerbtn.setGeometry(QtCore.QRect(20, 260, 151, 20))
        self.leerbtn.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        font = QtGui.QFont()
        font.setFamily("MV Boli")
        font.setPointSize(10)
        self.leerbtn.setFont(font)
        self.leerbtn.setStyleSheet("QRadioButton::indicator {\n"
                                   "    width: 0;\n"
                                   "    height: 0;\n"
                                   "}")
        self.leerbtn.setObjectName("leerbtn")
        self.sepiabtn = QtWidgets.QRadioButton(self.filterfrm)
        self.sepiabtn.setGeometry(QtCore.QRect(20, 310, 151, 20))
        self.sepiabtn.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        font = QtGui.QFont()
        font.setFamily("MV Boli")
        font.setPointSize(10)
        self.sepiabtn.setFont(font)
        self.sepiabtn.setStyleSheet("QRadioButton::indicator {\n"
                                    "    width: 0;\n"
                                    "    height: 0;\n"
                                    "}")
        self.sepiabtn.setObjectName("sepiabtn")
        self.blurfilters = QtWidgets.QLabel(self.filterfrm)
        self.blurfilters.setGeometry(QtCore.QRect(20, 380, 121, 31))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.blurfilters.setFont(font)
        self.blurfilters.setObjectName("blurfilters")
        self.gausbtn = QtWidgets.QRadioButton(self.filterfrm)
        self.gausbtn.setGeometry(QtCore.QRect(20, 430, 151, 20))
        self.gausbtn.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        font = QtGui.QFont()
        font.setFamily("MV Boli")
        font.setPointSize(10)
        self.gausbtn.setFont(font)
        self.gausbtn.setStyleSheet("QRadioButton::indicator {\n"
                                   "    width: 0;\n"
                                   "    height: 0;\n"
                                   "}")
        self.gausbtn.setObjectName("gausbtn")
        self.medbtn = QtWidgets.QRadioButton(self.filterfrm)
        self.medbtn.setGeometry(QtCore.QRect(20, 480, 151, 20))
        self.medbtn.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        font = QtGui.QFont()
        font.setFamily("MV Boli")
        font.setPointSize(10)
        self.medbtn.setFont(font)
        self.medbtn.setStyleSheet("QRadioButton::indicator {\n"
                                  "    width: 0;\n"
                                  "    height: 0;\n"
                                  "}")
        self.medbtn.setObjectName("medbtn")
        self.cropfrm = QtWidgets.QFrame(self.filterfrm)
        self.cropfrm.setGeometry(QtCore.QRect(0, 10, 331, 741))
        self.cropfrm.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.cropfrm.setFrameShadow(QtWidgets.QFrame.Raised)
        self.cropfrm.setObjectName("cropfrm")
        self.croppingbtn = QtWidgets.QPushButton(self.cropfrm)
        self.croppingbtn.setGeometry(QtCore.QRect(20, 70, 101, 31))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.croppingbtn.setFont(font)
        self.croppingbtn.setObjectName("croppingbtn")
        self.flipvbtn = QtWidgets.QPushButton(self.cropfrm)
        self.flipvbtn.setGeometry(QtCore.QRect(20, 160, 131, 31))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.flipvbtn.setFont(font)
        self.flipvbtn.setObjectName("flipvbtn")
        self.fliphbtn = QtWidgets.QPushButton(self.cropfrm)
        self.fliphbtn.setGeometry(QtCore.QRect(160, 160, 141, 31))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.fliphbtn.setFont(font)
        self.fliphbtn.setObjectName("fliphbtn")
        self.cropl = QtWidgets.QLabel(self.cropfrm)
        self.cropl.setGeometry(QtCore.QRect(20, 30, 91, 21))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.cropl.setFont(font)
        self.cropl.setObjectName("cropl")
        self.flipl = QtWidgets.QLabel(self.cropfrm)
        self.flipl.setGeometry(QtCore.QRect(20, 120, 91, 21))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.flipl.setFont(font)
        self.flipl.setObjectName("flipl")
        self.rotbtn = QtWidgets.QPushButton(self.cropfrm)
        self.rotbtn.setGeometry(QtCore.QRect(20, 270, 131, 31))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.rotbtn.setFont(font)
        self.rotbtn.setObjectName("rotbtn")
        self.rotatel = QtWidgets.QLabel(self.cropfrm)
        self.rotatel.setGeometry(QtCore.QRect(20, 220, 91, 21))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.rotatel.setFont(font)
        self.rotatel.setObjectName("rotatel")
        self.transl = QtWidgets.QLabel(self.cropfrm)
        self.transl.setGeometry(QtCore.QRect(20, 330, 91, 21))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.transl.setFont(font)
        self.transl.setObjectName("transl")
        self.transslider = QtWidgets.QSlider(self.cropfrm)
        self.transslider.setGeometry(QtCore.QRect(10, 370, 291, 22))
        self.transslider.setOrientation(QtCore.Qt.Horizontal)
        self.transslider.setObjectName("transslider")
        self.adjustfrm = QtWidgets.QFrame(self.cropfrm)
        self.adjustfrm.setGeometry(QtCore.QRect(0, -10, 321, 721))
        self.adjustfrm.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.adjustfrm.setFrameShadow(QtWidgets.QFrame.Raised)
        self.adjustfrm.setObjectName("adjustfrm")
        self.bright = QtWidgets.QLabel(self.adjustfrm)
        self.bright.setGeometry(QtCore.QRect(10, 80, 111, 21))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.bright.setFont(font)
        self.bright.setObjectName("bright")
        self.brightslider = QtWidgets.QSlider(self.adjustfrm)
        self.brightslider.setEnabled(True)
        self.brightslider.setGeometry(QtCore.QRect(10, 110, 271, 22))
        self.brightslider.setOrientation(QtCore.Qt.Horizontal)
        self.brightslider.setTickPosition(QtWidgets.QSlider.NoTicks)
        self.brightslider.setObjectName("brightslider")
        self.contrl = QtWidgets.QLabel(self.adjustfrm)
        self.contrl.setGeometry(QtCore.QRect(10, 150, 111, 21))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.contrl.setFont(font)
        self.contrl.setObjectName("contrl")
        self.contraslider = QtWidgets.QSlider(self.adjustfrm)
        self.contraslider.setGeometry(QtCore.QRect(10, 190, 271, 22))
        self.contraslider.setOrientation(QtCore.Qt.Horizontal)
        self.contraslider.setObjectName("contraslider")
        self.invertbtn = QtWidgets.QPushButton(self.adjustfrm)
        self.invertbtn.setGeometry(QtCore.QRect(10, 380, 111, 31))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.invertbtn.setFont(font)
        self.invertbtn.setObjectName("invertbtn")
        self.blurl = QtWidgets.QLabel(self.adjustfrm)
        self.blurl.setGeometry(QtCore.QRect(10, 230, 111, 21))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.blurl.setFont(font)
        self.blurl.setObjectName("blurl")
        self.blurslider = QtWidgets.QSlider(self.adjustfrm)
        self.blurslider.setGeometry(QtCore.QRect(10, 280, 271, 22))
        self.blurslider.setOrientation(QtCore.Qt.Horizontal)
        self.blurslider.setObjectName("blurslider")
        self.sharpbtn = QtWidgets.QPushButton(self.adjustfrm)
        self.sharpbtn.setGeometry(QtCore.QRect(10, 330, 111, 28))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.sharpbtn.setFont(font)
        self.sharpbtn.setObjectName("sharpbtn")
        self.imgviewer = QtWidgets.QLabel(self.centralwidget)
        self.imgviewer.setGeometry(QtCore.QRect(320, 30, 1201, 971))
        self.imgviewer.setAutoFillBackground(False)
        self.imgviewer.setStyleSheet("background-color:#6f6f6f;\n"
                                     "color:white;\n"
                                     "border:1px solid white;\n"
                                     "")
        self.imgviewer.setText("")
        self.imgviewer.setTextFormat(QtCore.Qt.PlainText)
        self.imgviewer.setScaledContents(True)
        self.imgviewer.setWordWrap(False)
        self.imgviewer.setObjectName("imgviewer")
        maineditor.setCentralWidget(self.centralwidget)
        self.statusbar = QtWidgets.QStatusBar(maineditor)
        self.statusbar.setObjectName("statusbar")
        maineditor.setStatusBar(self.statusbar)
        # creating some global variables
        self.filename = None  # Will hold the image address location
        self.filenameopening = None  # getting filename from opening window
        self.tmp = None  # Will hold the temporary image for display
        self.cropping = False  # cropping global variable
        self.textcol = None  # colour of text
        self.brightness_value_now = 0  # global brightness value
        self.contrast_value_now = 0  # global contrast value
        self.blur_value_now = 0  # global blur value
        self.trans_value_now = 0  # global translate image value
        # connecting my functions
        self.ajustbtn.clicked.connect(self.adjustclick)
        self.cropbtn.clicked.connect(self.cropclick)
        self.filterbtn.clicked.connect(self.filterclick)
        self.textbtn.clicked.connect(self.textclick)
        # self.chscolorbtn.clicked.connect(self.openColorDialog)
        self.openbtn.clicked.connect(self.loadimg)
        self.revertbtn.clicked.connect(self.revert)
        self.savechgbtn.clicked.connect(self.savechg)
        self.Revertallbtn.clicked.connect(self.revertall)
        self.savebtn.clicked.connect(self.savePhoto)
        # adjust options
        self.brightslider.valueChanged['int'].connect(self.brightness_value)
        self.contraslider.valueChanged['int'].connect(self.contrast_value)
        self.blurslider.valueChanged['int'].connect(self.blur_value)
        self.transslider.valueChanged['int'].connect(self.get_transval)
        self.sharpbtn.clicked.connect(self.sharpenimg)
        self.invertbtn.clicked.connect(self.invertcol)
        # crop options
        self.croppingbtn.clicked.connect(self.crop)
        self.flipvbtn.clicked.connect(self.flipv)
        self.fliphbtn.clicked.connect(self.fliph)
        self.rotbtn.clicked.connect(self.rotate)
        # filter options
        self.bandwbtn.clicked.connect(self.filt)
        self.embossbtn.clicked.connect(self.filt)
        self.grayscalebtn.clicked.connect(self.filt)
        self.bleanbtn.clicked.connect(self.filt)
        self.leerbtn.clicked.connect(self.filt)
        self.sepiabtn.clicked.connect(self.filt)
        self.gausbtn.clicked.connect(self.filt)
        self.medbtn.clicked.connect(self.filt)
        # text options
        self.Addtextbtn.clicked.connect(self.addtext)
        self.chscolorbtn.clicked.connect(self.openColorDialog)
        self.retranslateUi(maineditor)
        QtCore.QMetaObject.connectSlotsByName(maineditor)

    def retranslateUi(self, maineditor):
        _translate = QtCore.QCoreApplication.translate
        maineditor.setWindowTitle(_translate("maineditor", "Spark"))
        self.Tools.setTitle(_translate("maineditor", "Tools"))
        self.ajustbtn.setText(_translate("maineditor", "Adjust"))
        self.cropbtn.setText(_translate("maineditor", "Crop"))
        self.filterbtn.setText(_translate("maineditor", "Filter"))
        self.textbtn.setText(_translate("maineditor", "Add text"))
        self.savebtn.setText(_translate("maineditor", "Save"))
        self.openbtn.setText(_translate("maineditor", "Open"))
        self.Revertallbtn.setText(_translate("maineditor", "Revert all"))
        self.options.setTitle(_translate("maineditor", "Options"))
        self.savechgbtn.setText(_translate("maineditor", "Save changes"))
        self.revertbtn.setText(_translate("maineditor", "Revert"))
        self.fontl.setText(_translate("maineditor", "Font"))
        self.colorl.setText(_translate("maineditor", "Colors"))
        self.chscolorbtn.setText(_translate("maineditor", "Choose color"))
        self.fontselect.setItemText(0, _translate("maineditor", "Pialo"))
        self.fontselect.setItemText(1, _translate("maineditor", "Phoenix"))
        self.fontselect.setItemText(2, _translate("maineditor", "Reyna"))
        self.fontselect.setItemText(3, _translate("maineditor", "MV Astra"))
        self.fontselect.setItemText(4, _translate("maineditor", "Omen"))
        self.fontselect.setItemText(5, _translate("maineditor", "Yoru"))
        self.fontselect.setItemText(6, _translate("maineditor", "Cypher"))
        self.fontselect.setItemText(7, _translate("maineditor", "Skye"))
        self.inputtxtl.setText(_translate("maineditor", "Input Text"))
        self.Addtextbtn.setText(_translate("maineditor", "Add Text"))
        self.colorfilters.setText(_translate("maineditor", "Color Filters"))
        self.bandwbtn.setText(_translate("maineditor", "Black and White"))
        self.embossbtn.setText(_translate("maineditor", "Emboss"))
        self.grayscalebtn.setText(_translate("maineditor", "Grayscale"))
        self.bleanbtn.setText(_translate("maineditor", "Bleam"))
        self.leerbtn.setText(_translate("maineditor", "Leer"))
        self.sepiabtn.setText(_translate("maineditor", "Sepia"))
        self.blurfilters.setText(_translate("maineditor", "Blur Filters"))
        self.gausbtn.setText(_translate("maineditor", "Gaussian"))
        self.medbtn.setText(_translate("maineditor", "Median"))
        self.croppingbtn.setText(_translate("maineditor", "Crop"))
        self.flipvbtn.setText(_translate("maineditor", "Flip Vericaly"))
        self.fliphbtn.setText(_translate("maineditor", "Flip Horizontally"))
        self.cropl.setText(_translate("maineditor", "Cropping"))
        self.flipl.setText(_translate("maineditor", "Flip image"))
        self.rotbtn.setText(_translate("maineditor", "Rotate Image"))
        self.rotatel.setText(_translate("maineditor", "Rotate"))
        self.transl.setText(_translate("maineditor", "Translate"))
        self.bright.setText(_translate("maineditor", "Brightness"))
        self.contrl.setText(_translate("maineditor", "Contrast"))
        self.invertbtn.setText(_translate("maineditor", "Invert colors"))
        self.blurl.setText(_translate("maineditor", "Blur"))
        self.sharpbtn.setText(_translate("maineditor", "Sharpen"))

    def openfilefromopening(self):
        self.image = cv2.imread(self.filenameopening)
        self.tmp = self.image
        self.setPhoto(self.tmp)

    def loadimg(self):
        try:
            self.name = QtWidgets.QFileDialog.getOpenFileName(
                filter="Image (*.*)")[0]
            if (self.name != ''):
                self.filename = self.name
                self.image = cv2.imread(self.filename)
                self.tmp = self.image
                self.setPhoto(self.tmp)
            else:
                raise 'self.name is empty'
        except:
            pass

    def setPhoto(self, image):
        self.editable = image
        image = imutils.resize(image, width=1201, height=971)
        frame = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)
        image = QtGui.QImage(
            frame, frame.shape[1], frame.shape[0], frame.strides[0], QtGui.QImage.Format_RGB888)
        self.imgviewer.setPixmap(QtGui.QPixmap.fromImage(image))

    def revert(self):
        self.setPhoto(self.tmp)

    def savechg(self):
        self.tmp = self.editable

    def revertall(self):
        self.image = cv2.imread(self.filename)
        self.tmp = self.image
        try:
            self.setPhoto(self.tmp)
        except:
            pass

    def savePhoto(self):
        if (self.ifsaveclicked()):
            try:
                filename = QtWidgets.QFileDialog.getSaveFileName(
                    filter="JPG(*.jpg);;PNG(*.png);;TIFF(*.tiff);;BMP(*.bmp)")[0]
                cv2.imwrite(filename, self.tmp)
                # mysquery.insertblob(filename)
            except:
                pass
        else:
            self.savepopupwar()

# adjustfrm
    def brightness_value(self, value):
        self.brightness_value_now = value
        self.updateadjustedimg()

    def contrast_value(self, value):
        self.contrast_value_now = value
        self.updateadjustedimg()

    def blur_value(self, value):
        self.blur_value_now = value
        self.updateadjustedimg()

    def adjustclick(self):
        if (self.ifsaveclicked()):
            self.adjustfrm.show()
            self.cropfrm.show()
            self.filterfrm.show()
            self.textfrm.show()
        else:
            self.savepopupwar()

    def cropclick(self):
        if (self.ifsaveclicked()):
            self.adjustfrm.hide()
            self.cropfrm.show()
            self.filterfrm.show()
            self.textfrm.show()
        else:
            self.savepopupwar()

    def filterclick(self):
        if (self.ifsaveclicked()):
            self.adjustfrm.hide()
            self.cropfrm.hide()
            self.filterfrm.show()
            self.textfrm.show()
        else:
            self.savepopupwar()

    def textclick(self):
        if (self.ifsaveclicked()):
            self.adjustfrm.hide()
            self.cropfrm.hide()
            self.filterfrm.hide()
            self.textfrm.show()
        else:
            self.savepopupwar()

    def savepopupwar(self):
        msg = QMessageBox()
        msg.setWindowTitle('Changes may be lost')
        msg.setText('Please either save the changes or revert them!')
        msg.setIcon(QMessageBox.Warning)
        msg.setInformativeText(
            'You have not saved the changes you have made.click the save changes button to save them oterwise the changes will be lost')
        x = msg.exec_()

    def ifsaveclicked(self):
        try:
            if self.editable.shape == self.tmp.shape:
                difference = cv2.subtract(self.editable, self.tmp)
                b, g, r = cv2.split(difference)
                if cv2.countNonZero(b) == 0 and cv2.countNonZero(g) == 0 and cv2.countNonZero(r) == 0:
                    return True
                else:
                    return False
        except:
            return False

# updating values in adjustframe to label
    def updateadjustedimg(self):
        img = options.brightness_edit(self.brightness_value_now, self.tmp)
        img = options.contrast_edit(self.contrast_value_now, img)
        img = options.blur_edit(self.blur_value_now, img)
        self.setPhoto(img)

    def sharpenimg(self):
        kernel = np.array([[0, -1, 0],
                           [-1, 5, -1],
                           [0, -1, 0]])
        img = cv2.filter2D(src=self.editable, ddepth=-1, kernel=kernel)
        self.setPhoto(img)

    def invertcol(self):
        img = cv2.bitwise_not(self.editable)
        self.setPhoto(img)

# crop options
    def crop(self):
        self.cropping = False
        self.cropped = False
        self.x_start, self.y_start, self.x_end, self. y_end = 0, 0, 0, 0
        image = imutils.resize(self.editable, width=1201, height=971)
        oriImage = image.copy()

        def mouse_crop(event, x, y, flags, param):
            # grab references to the global variables
            # self.x_start,self. y_start, x_end, y_end

            # if the left mouse button was DOWN, start RECORDING
            # (x, y) coordinates and indicate that cropping is being
            if event == cv2.EVENT_LBUTTONDOWN:
                self.x_start, self.y_start, self.x_end, self.y_end = x, y, x, y
                self.cropping = True

            # Mouse is Moving
            elif event == cv2.EVENT_MOUSEMOVE:
                if self.cropping == True:
                    self.x_end, self.y_end = x, y

            # if the left mouse button was released
            elif event == cv2.EVENT_LBUTTONUP:
                # record the ending (x, y) coordinates
                self.x_end, self.y_end = x, y
                self.cropping = False  # cropping is finished
                refPoint = [(self.x_start, self.y_start),
                            (self.x_end, self.y_end)]

                if len(refPoint) == 2:  # when two points were found
                    roi = oriImage[refPoint[0][1]:refPoint[1]
                                   [1], refPoint[0][0]:refPoint[1][0]]
                    self.setPhoto(roi)

        cv2.namedWindow("image")
        cv2.setMouseCallback("image", mouse_crop)

        while True:
            i = image.copy()
            if self.cropping == False:
                cv2.imshow("image", image)
                if (self.cropped == True):
                    cv2.waitKey(1)
                    break
            elif self.cropping == True:
                cv2.rectangle(i, (self.x_start, self.y_start),
                              (self.x_end, self.y_end), (255, 0, 0), 2)
                self.cropped = True
                cv2.imshow("image", i)
            cv2.waitKey(1)

        # close all open windows
        cv2.destroyAllWindows()

    def flipv(self):
        image = cv2.flip(self.editable, 0)
        self.setPhoto(image)

    def fliph(self):
        image = cv2.flip(self.editable, 1)
        self.setPhoto(image)

    def rotate(self):
        rotimg = cv2.rotate(self.editable, cv2.ROTATE_90_CLOCKWISE)
        self.setPhoto(rotimg)

    def get_transval(self, value):
        self.trans_value_now = value
        self.traanslateimg()

    def traanslateimg(self):
        self.tranimg = imutils.resize(self.tmp, width=1201, height=971)
        self.trans_value_now = self.trans_value_now/10
        if (self.trans_value_now == 0):
            tx, ty = 0, 0
        else:
            tx, ty = 1201/(10-self.trans_value_now), 971 / \
                (10-self.trans_value_now)
        translation_matrix = np.array([
            [1, 0, tx],
            [0, 1, ty]
        ], dtype=np.float32)
        translated_image = cv2.warpAffine(
            src=self.tranimg, M=translation_matrix, dsize=(1201, 971))
        self.setPhoto(translated_image)

# filters options
    def filt(self):
        if self.bandwbtn.isChecked():
            img = options.bandw(self.tmp)
        elif self.embossbtn.isChecked():
            img = options.emboss(self.tmp)
        elif self.grayscalebtn.isChecked():
            img = options.grayscal(self.tmp)
        elif self.bleanbtn.isChecked():
            img = options.bleam(self.tmp)
        elif self.leerbtn.isChecked():
            img = options.leer(self.tmp)
        elif self.sepiabtn.isChecked():
            img = options.sepia(self.tmp)
        elif self.gausbtn.isChecked():
            img = options.gaussian(self.tmp)
        elif self.medbtn.isChecked():
            img = options.median(self.tmp)
        self.setPhoto(img)
# text options

    def openColorDialog(self):
        self.txtcolor = QColorDialog.getColor()
        if self.txtcolor.isValid():
            rgbcol = tuple(int(self.txtcolor.name().lstrip('#')
                           [i:i+2], 16) for i in (0, 2, 4))
            self.textcol = (rgbcol[2], rgbcol[1], rgbcol[0])

    def addtext(self):
        val = self.textEdit.toPlainText()
        valu = self.fontselect.currentText()
        font = options.fontis(valu)
        image = imutils.resize(self.editable, width=1201, height=971)
        im = options.texter(image, val, font, self.textcol)
        # after calling texter it changes the self.tmp variable
        self.setPhoto(im)


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    maineditor = QtWidgets.QMainWindow()
    ui = Ui_maineditor()
    ui.setupUi(maineditor)
    maineditor.show()
    sys.exit(app.exec_())
